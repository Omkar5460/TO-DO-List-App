import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ForkJoinPool;

class ParallelBFS {
    static class Graph {
        int V;
        ArrayList<ArrayList<Integer>> adj;

        Graph(int v) {
            V = v;
            adj = new ArrayList<>(V);
            for (int i = 0; i < V; ++i)
                adj.add(new ArrayList<>());
        }

        void addEdge(int v, int w) {
            adj.get(v).add(w);
            adj.get(w).add(v);
        }
    }

    static class Node {
        int vertex;
        int level;

        Node(int v, int l) {
            vertex = v;
            level = l;
        }
    }

    static void parallelBFS(Graph graph, int startVertex) {
        ForkJoinPool pool = new ForkJoinPool();
        boolean[] visited = new boolean[graph.V];
        Queue<Node> queue = new LinkedList<>();
        visited[startVertex] = true;
        queue.add(new Node(startVertex, 0));

        while (!queue.isEmpty()) {
            Node currentNode = queue.poll();
            int vertex = currentNode.vertex;
            int level = currentNode.level;

            System.out.println("Vertex: " + vertex + ", Level: " + level);

            pool.submit(() -> {
                for (Integer adjVertex : graph.adj.get(vertex)) {
                    if (!visited[adjVertex]) {
                        visited[adjVertex] = true;
                        queue.add(new Node(adjVertex, level + 1));
                    }
                }
            });
        }
        pool.shutdown();
    }

    public static void main(String[] args) {
        Graph graph = new Graph(6);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);

        parallelBFS(graph, 0);
    }
}




#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

// Graph class representing the adjacency list
class Graph {
    int V;  // Number of vertices
    vector<vector<int>> adj;  // Adjacency list

public:
    Graph(int V) : V(V), adj(V) {}

    // Add an edge to the graph
    void addEdge(int v, int w) {
        adj[v].push_back(w);
    }

    // Parallel Breadth-First Search
    void parallelBFS(int startVertex) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[startVertex] = true;
        q.push(startVertex);

        while (!q.empty()) {
            int v = q.front();
            q.pop();
            cout << v << " ";

            #pragma omp parallel for
            for (int i = 0; i < adj[v].size(); ++i) {
                int n = adj[v][i];
                if (!visited[n]) {
                    #pragma omp critical
                    {
                        visited[n] = true;
                        q.push(n);
                    }
                }
            }
        }
    }
};

int main() {
    // Create a graph
    Graph g(7);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);
    
    /*
        0 -------->1
        |         / \
        |        /   \
        |       /     \
        v       v       v
        2 ----> 3       4
        |      |
        |      |
        v      v
        5      6
    */

    cout << "Breadth-First Search (BFS): ";
    g.parallelBFS(0);
    cout << endl;

    return 0;
}
